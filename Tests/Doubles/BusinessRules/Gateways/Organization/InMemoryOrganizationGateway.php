<?php

// Auto Generated by OpenClassrooms Code Generator

declare(strict_types=1);

namespace Doubles\BusinessRules\Gateways\Organization;

use OC\Tests\EntityUtil;
use OC\BusinessRules\Entities\Organization\Organization;
use OC\BusinessRules\Gateways\Organization\Exceptions\OrganizationNotFoundException;
use OC\BusinessRules\Gateways\Organization\OrganizationGateway;
use OpenClassrooms\UseCase\Application\Entity\PaginatedCollectionBuilderImpl;

class InMemoryOrganizationGateway implements OrganizationGateway
{
    /**
     * @var Organization[]
     */
    public static $organizations = [];

    /**
     * @var int
     */
    public static $id = 1;

    public function __construct(array $organizations = [])
    {
        self::$organizations = $organizations;
    }

    public function delete(Organization $organization): void
    {
        unset(self::$organizations[$organization->getId()]);
    }

    /**
     * {@inheritdoc}
     */
    public function findAll(array $filters = [], array $sorts = [], array $pagination = []): iterable
    {
        $paginatedCollectionBuilder = new PaginatedCollectionBuilderImpl();

        return $paginatedCollectionBuilder->create()
            ->withItems(self::$organizations)
            ->withTotalItems(count(self::$organizations))
            ->build();
    }

    public function findById(int $organizationId): Organization
    {
        if (array_key_exists($organizationId, self::$organizations)) {
            return self::$organizations[$organizationId];
        }

        throw new OrganizationNotFoundException();
    }

    public function insert(Organization $organization): void
    {
        EntityUtil::setId($organization, self::$id);
        self::$organizations[] = $organization;
    }

    public function update(Organization $organization): void
    {
        $organization->update();
    }
}
