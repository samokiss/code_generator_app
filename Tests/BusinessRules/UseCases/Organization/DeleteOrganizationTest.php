<?php

// Auto Generated by OpenClassrooms Code Generator

declare(strict_types=1);

namespace BusinessRules\UseCases\Organization;

use OC\BusinessRules\Requestors\Organization\DeleteOrganizationRequest;
use OC\BusinessRules\UseCases\Organization\DeleteOrganization;
use OC\BusinessRules\UseCases\Organization\DTO\Request\DeleteOrganizationRequestBuilderImpl;
use OC\BusinessRules\UseCases\Organization\DTO\Request\DeleteOrganizationRequestDTO;
use Doubles\BusinessRules\Entities\Organization\OrganizationStub1;
use Doubles\BusinessRules\Gateways\Organization\InMemoryOrganizationGateway;
use PHPUnit\Framework\TestCase;

final class DeleteOrganizationTest extends TestCase
{
    /**
     * @var DeleteOrganizationRequestDTO
     */
    private $request;

    /**
     * @var DeleteOrganization
     */
    private $useCase;

    /**
     * @test
     * @expectedException \OC\BusinessRules\Gateways\Organization\Exceptions\OrganizationNotFoundException
     */
    public function organizationNotFoundThrowException(): void
    {
        $this->request->organizationId = -1;
        $this->useCase->execute($this->request);
    }

    /**
     * @test
     */
    public function deleteOrganization(): void
    {
        $this->assertNotEmpty(InMemoryOrganizationGateway::$organizations);
        $this->useCase->execute($this->request);

        $this->assertEmpty(InMemoryOrganizationGateway::$organizations);
    }

    protected function setUp(): void
    {
        $organizationStub = [OrganizationStub1::ID => new OrganizationStub1()];
        $this->request = $this->buildRequest();
        $this->useCase = new DeleteOrganization(new InMemoryOrganizationGateway($organizationStub));
    }

    private function buildRequest(): DeleteOrganizationRequest
    {
        return (new DeleteOrganizationRequestBuilderImpl())
            ->create()
            ->withOrganizationId(OrganizationStub1::ID)
            ->build();
    }
}
