<?php

// Auto Generated by OpenClassrooms Code Generator

declare(strict_types=1);

namespace BusinessRules\UseCases\Organization;

use OC\App\Entity\Organization\OrganizationFactoryImpl;
use OC\BusinessRules\Requestors\Organization\CreateOrganizationRequest;
use OC\BusinessRules\UseCases\Organization\CreateOrganization;
use OC\BusinessRules\UseCases\Organization\DTO\Request\CreateOrganizationRequestBuilderImpl;
use OC\BusinessRules\UseCases\Organization\DTO\Request\CreateOrganizationRequestDTO;
use Doubles\BusinessRules\Entities\Organization\OrganizationStub1;
use Doubles\BusinessRules\Gateways\Organization\InMemoryOrganizationGateway;
use Doubles\BusinessRules\Responders\Organization\OrganizationDetailResponseAssemblerMock;
use Doubles\BusinessRules\Responders\Organization\OrganizationDetailResponseStub1;
use Doubles\BusinessRules\Responders\Organization\OrganizationDetailResponseTestCase;
use PHPUnit\Framework\TestCase;

final class CreateOrganizationTest extends TestCase
{
    use OrganizationDetailResponseTestCase;

    /**
     * @var CreateOrganizationRequestDTO
     */
    private $request;

    /**
     * @var CreateOrganization
     */
    private $useCase;

    /**
     * @test
     */
    public function createOrganizationShouldReturnResponse(): void
    {
        InMemoryOrganizationGateway::$id = OrganizationStub1::ID;
        $response = $this->useCase->execute($this->request);

        $expectedResponse = new OrganizationDetailResponseStub1();
        $this->assertOrganizationDetailResponse($expectedResponse, $response);
    }

    protected function setup(): void
    {
        $this->request = $this->buildRequest();
        $this->useCase = new CreateOrganization(
            new OrganizationDetailResponseAssemblerMock(),
            new OrganizationFactoryImpl(),
            new InMemoryOrganizationGateway([OrganizationStub1::ID => new OrganizationStub1()])
        );
    }

    private function buildRequest(): CreateOrganizationRequest
    {
        $builder = new CreateOrganizationRequestBuilderImpl();

        return $builder
            ->create()
            ->withDescription(OrganizationStub1::DESCRIPTION)
            ->withLogo(OrganizationStub1::LOGO)
            ->withName(OrganizationStub1::NAME)
            ->build();
    }
}
