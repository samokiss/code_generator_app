<?php

// Auto Generated by OpenClassrooms Code Generator

declare(strict_types=1);

namespace BusinessRules\UseCases\Organization;

use OC\BusinessRules\Requestors\Organization\GetOrganizationRequest;
use OC\BusinessRules\UseCases\Organization\DTO\Request\GetOrganizationRequestBuilderImpl;
use OC\BusinessRules\UseCases\Organization\DTO\Request\GetOrganizationRequestDTO;
use OC\BusinessRules\UseCases\Organization\GetOrganization;
use Doubles\BusinessRules\Entities\Organization\OrganizationStub1;
use Doubles\BusinessRules\Gateways\Organization\InMemoryOrganizationGateway;
use Doubles\BusinessRules\Responders\Organization\OrganizationDetailResponseAssemblerMock;
use Doubles\BusinessRules\Responders\Organization\OrganizationDetailResponseStub1;
use Doubles\BusinessRules\Responders\Organization\OrganizationDetailResponseTestCase;
use PHPUnit\Framework\TestCase;

class GetOrganizationTest extends TestCase
{
    use OrganizationDetailResponseTestCase;

    /**
     * @var GetOrganizationRequestDTO
     */
    private $request;

    /**
     * @var GetOrganization
     */
    private $useCase;

    /**
     * @test
     *
     * @expectedException \OC\BusinessRules\Gateways\Organization\Exceptions\OrganizationNotFoundException
     */
    final public function organizationNotFoundShouldThrowException(): void
    {
        $this->request->id = -1;
        $this->useCase->execute($this->request);
    }

    /**
     * @test
     */
    final public function getOrganizationShouldReturnResponse(): void
    {
        $response = $this->useCase->execute($this->request);

        $this->assertOrganizationDetailResponse(new OrganizationDetailResponseStub1(), $response);

        $this->fail("TODO: configure stub");
    }

    protected function setup(): void
    {
        $this->useCase = new GetOrganization(
            new OrganizationDetailResponseAssemblerMock(),
            new InMemoryOrganizationGateway([OrganizationStub1::ID => new OrganizationStub1()])
        );
        $this->request = $this->buildRequest();
    }

    private function buildRequest(): GetOrganizationRequest
    {
        $builder = new GetOrganizationRequestBuilderImpl();

        return $builder
            ->create()
            ->withOrganizationId(OrganizationStub1::ID)
            ->build();
    }
}
