<?php

// Auto Generated by OpenClassrooms Code Generator

declare(strict_types=1);

namespace BusinessRules\UseCases\Organization;

use OC\BusinessRules\Gateways\Pagination;
use OC\BusinessRules\Requestors\Organization\GetOrganizationsRequest;
use OC\BusinessRules\UseCases\Organization\DTO\Request\GetOrganizationsRequestBuilderImpl;
use OC\BusinessRules\UseCases\Organization\DTO\Request\GetOrganizationsRequestDTO;
use OC\BusinessRules\UseCases\Organization\GetOrganizations;
use Doubles\BusinessRules\Entities\Organization\OrganizationStub1;
use Doubles\BusinessRules\Entities\Organization\OrganizationStub2;
use Doubles\BusinessRules\Gateways\Organization\InMemoryOrganizationGateway;
use Doubles\BusinessRules\Responders\Organization\OrganizationListItemResponseAssemblerMock;
use Doubles\BusinessRules\Responders\Organization\OrganizationListItemResponseStub1;
use Doubles\BusinessRules\Responders\Organization\OrganizationListItemResponseStub2;
use Doubles\BusinessRules\Responders\Organization\OrganizationListItemResponseTestCase;
use PHPUnit\Framework\TestCase;

class GetOrganizationsTest extends TestCase
{
    use OrganizationListItemResponseTestCase;

    /**
     * @var GetOrganizationsRequestDTO
     */
    private $request;

    /**
     * @var GetOrganizations
     */
    private $useCase;

    /**
     * @test
     */
    final public function withoutOrganizationsReturnEmpty(): void
    {
        InMemoryOrganizationGateway::$organizations = [];
        $response = $this->useCase->execute($this->request);
        $this->assertSame(0, $response->getTotalItems());
        $this->assertEmpty($response->getItems());
    }

    /**
     * @test
     */
    final public function getOrganizationsShouldReturnResponse(): void
    {
        InMemoryOrganizationGateway::$organizations = [
            OrganizationStub1::ID => new OrganizationStub1(),
            OrganizationStub2::ID => new OrganizationStub2(),
        ];
        $response = $this->useCase->execute($this->request);
        $this->assertSame(2, $response->getTotalItems());
        $this->assertCount(2, $response->getItems());

        $this->assertOrganizationListItemResponses(
            [
                new OrganizationListItemResponseStub1(),
                new OrganizationListItemResponseStub2(),
            ],
            $response->getItems()
        );

        $this->fail("TODO: configure stub");
    }

    protected function setup(): void
    {
        $this->useCase = new GetOrganizations(
            new InMemoryOrganizationGateway([OrganizationStub1::ID => new OrganizationStub1()]),
            new OrganizationListItemResponseAssemblerMock()
        );
        $this->request = $this->buildRequest();
    }

    private function buildRequest(): GetOrganizationsRequest
    {
        $builder = new GetOrganizationsRequestBuilderImpl();

        return $builder
            ->create()
            ->withFilters([])
            ->withItemsPerPage(Pagination::ITEMS_PER_PAGE_DEFAULT)
            ->withPage()
            ->withSort([])
            ->build();
    }
}
