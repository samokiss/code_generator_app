<?php

// Auto Generated by OpenClassrooms Code Generator

declare(strict_types=1);

namespace BusinessRules\UseCases\Organization;

use OC\Tests\EntityUtil;
use OC\BusinessRules\Requestors\Organization\EditOrganizationRequest;
use OC\BusinessRules\UseCases\Organization\DTO\Request\EditOrganizationRequestBuilderImpl;
use OC\BusinessRules\UseCases\Organization\DTO\Request\EditOrganizationRequestDTO;
use OC\BusinessRules\UseCases\Organization\EditOrganization;
use Doubles\BusinessRules\Entities\Organization\OrganizationStub1;
use Doubles\BusinessRules\Gateways\Organization\InMemoryOrganizationGateway;
use Doubles\BusinessRules\Responders\Organization\OrganizationDetailResponseAssemblerMock;
use Doubles\BusinessRules\Responders\Organization\OrganizationDetailResponseStub1;
use Doubles\BusinessRules\Responders\Organization\OrganizationDetailResponseTestCase;
use PHPUnit\Framework\TestCase;

final class EditOrganizationTest extends TestCase
{
    use OrganizationDetailResponseTestCase;

    /**
     * @var EditOrganizationRequestDTO
     */
    private $request;

    /**
     * @var EditOrganization
     */
    private $useCase;

    /**
     * @test
     *
     * @expectedException \OC\BusinessRules\Gateways\Organization\Exceptions\OrganizationNotFoundException
     */
    public function organizationNotFoundShouldThrowException(): void
    {
        $this->request->organizationId = -1;
        $this->useCase->execute($this->request);
    }

    /**
     * @test
     */
    public function editOrganization(): void
    {
        $this->request->organizationId = OrganizationStub1::ID;
        $response = $this->useCase->execute($this->request);

        $expectedResponse = new OrganizationDetailResponseStub1();
        EntityUtil::setId($expectedResponse, OrganizationStub1::ID);
        $this->assertOrganizationDetailResponse($expectedResponse, $response);
    }

    protected function setup(): void
    {
        $this->request = $this->buildRequest();
        $this->useCase = new EditOrganization(
            new InMemoryOrganizationGateway([OrganizationStub1::ID => new OrganizationStub1()]),
            new OrganizationDetailResponseAssemblerMock()
        );
    }

    private function buildRequest(): EditOrganizationRequest
    {
        $builder = new EditOrganizationRequestBuilderImpl();

        return $builder
            ->create()
            ->withDescription(OrganizationStub1::DESCRIPTION)
            ->withLogo(OrganizationStub1::LOGO)
            ->withName(OrganizationStub1::NAME)
            ->build();
    }
}
