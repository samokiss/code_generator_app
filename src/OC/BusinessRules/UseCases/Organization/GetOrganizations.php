<?php

// Auto Generated by OpenClassrooms Code Generator

declare(strict_types=1);

namespace OC\BusinessRules\UseCases\Organization;

use OC\BusinessRules\Gateways\Organization\OrganizationGateway;
use OC\BusinessRules\Gateways\Pagination;
use OC\BusinessRules\Requestors\Organization\GetOrganizationsRequest;
use OC\BusinessRules\Responders\Organization\OrganizationListItemResponseAssembler;
use OC\BusinessRules\Responders\PaginatedUseCaseResponse;
use OpenClassrooms\UseCase\Application\Annotations\Security;
use OpenClassrooms\UseCase\BusinessRules\Entities\PaginatedCollection;
use OpenClassrooms\UseCase\BusinessRules\Requestors\UseCase;
use OpenClassrooms\UseCase\BusinessRules\Requestors\UseCaseRequest;

class GetOrganizations implements UseCase
{
    /**
     * @var OrganizationGateway
     */
    private $organizationGateway;

    /**
     * @var OrganizationListItemResponseAssembler
     */
    private $responseAssembler;

    public function __construct(OrganizationGateway $organizationGateway, OrganizationListItemResponseAssembler $assembler)
    {
        $this->organizationGateway = $organizationGateway;
        $this->responseAssembler = $assembler;
    }

    /**
     * @Security(roles="")
     *
     * @param GetOrganizationsRequest $useCaseRequest
     */
    public function execute(UseCaseRequest $useCaseRequest): PaginatedUseCaseResponse
    {
        $organizations = $this->getOrganizations($useCaseRequest);

        return $this->buildResponse($organizations);
    }

    private function getOrganizations(GetOrganizationsRequest $useCaseRequest): PaginatedCollection
    {
        return $this->organizationGateway->findAll(
            $useCaseRequest->getFilters(),
            $useCaseRequest->getSorts(),
            $this->getPagination($useCaseRequest->getPage(), $useCaseRequest->getItemsPerPage())
        );
    }

    private function getPagination(int $page, int $itemPerPage): array
    {
        return [
            Pagination::PAGE           => $page,
            Pagination::ITEMS_PER_PAGE => $itemPerPage,
        ];
    }

    private function buildResponse(PaginatedCollection $organizations): PaginatedUseCaseResponse
    {
        return $this->responseAssembler->createPaginatedCollection($organizations);
    }
}
