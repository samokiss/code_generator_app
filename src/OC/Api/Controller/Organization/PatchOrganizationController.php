<?php

// Auto Generated by OpenClassrooms Code Generator

declare(strict_types=1);

namespace OC\Api\Controller\Organization;

use OC\ApiBundle\Framework\FrameworkBundle\Controller\AbstractApiController;
use OC\Api\Models\Organization\PatchOrganizationModel;
use OC\Api\ViewModels\Organization\OrganizationViewModelDetail;
use OC\Api\ViewModels\Organization\OrganizationViewModelDetailAssembler;
use OC\BusinessRules\Gateways\Organization\Exceptions\OrganizationNotFoundException;
use OC\BusinessRules\Requestors\Organization\EditOrganizationRequest;
use OC\BusinessRules\Requestors\Organization\EditOrganizationRequestBuilder;
use OC\BusinessRules\Responders\Organization\OrganizationDetailResponse;
use OC\BusinessRules\UseCases\Organization\EditOrganization;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\Routing\Annotation\Route;

class PatchOrganizationController extends AbstractApiController
{
    /**
     * @var EditOrganizationRequestBuilder
     */
    private $editOrganizationRequestBuilder;

    /**
     * @var OrganizationViewModelDetailAssembler
     */
    private $organizationViewModelDetailAssembler;

    public function __construct(
        EditOrganizationRequestBuilder $builder,
        OrganizationViewModelDetailAssembler $assembler
    ) {
        $this->editOrganizationRequestBuilder = $builder;
        $this->organizationViewModelDetailAssembler = $assembler;
    }

    /**
     * @Route("/organizations/{organizationId}", name="oc_apiorganization_organization_patch", methods={"PATCH"}, requirements={"organizationId"="^\d{1,9}$"})
     *
     * @Security("")
     * @throws NotFoundHttpException
     */
    public function patchAction(Request $request, int $organizationId): JsonResponse
    {
        try {
            /** @var PatchOrganizationModel $model */
            $model = $this->getModelFromRequest(PatchOrganizationModel::class);
            $response = $this->updateOrganization($organizationId, $model);

            return $this->createUpdatedResponse($this->buildViewModel($response));
        } catch (OrganizationNotFoundException $e) {
            $this->throwNotFoundException();
        }
    }

    /**
     * @throws OrganizationNotFoundException
     */
    private function updateOrganization(int $organizationId, PatchOrganizationModel $model): void
    {
        $this->get(EditOrganization::class)->execute($this->buildRequest($organizationId, $model));
    }

    private function buildRequest(int $organizationId, PatchOrganizationModel $model): EditOrganizationRequest
    {
        $requestBuilder = $this->editOrganizationRequestBuilder
            ->create()
            ->withOrganizationId($organizationId);

        !$model->description ?: $requestBuilder->withDescription($model->description);
        !$model->logo ?: $requestBuilder->withLogo($model->logo);
        !$model->name ?: $requestBuilder->withName($model->name);

        return $requestBuilder->build();
    }

    private function buildViewModel(OrganizationDetailResponse $response): OrganizationViewModelDetail
    {
        return $this->organizationViewModelDetailAssembler->create($response);
    }
}

