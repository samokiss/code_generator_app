<?php

// Auto Generated by OpenClassrooms Code Generator

declare(strict_types=1);

namespace OC\Api\Controller\Organization;

use OC\ApiBundle\Framework\FrameworkBundle\Controller\AbstractApiController;
use OC\Api\ViewModels\Organization\OrganizationViewModel;
use OC\Api\ViewModels\Organization\OrganizationViewModelDetailAssembler;
use OC\BusinessRules\Gateways\Organization\Exceptions\OrganizationNotFoundException;
use OC\BusinessRules\Requestors\Organization\GetOrganizationRequestBuilder;
use OC\BusinessRules\Responders\Organization\OrganizationDetailResponse;
use OC\BusinessRules\UseCases\Organization\GetOrganization;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\Routing\Annotation\Route;

class GetOrganizationController extends AbstractApiController
{
    /**
     * @var OrganizationViewModelDetailAssembler
     */
    private $organizationViewModelDetailAssembler;

    /**
     * @var GetOrganizationRequestBuilder
     */
    private $getOrganizationRequestBuilder;

    public function __construct(
        OrganizationViewModelDetailAssembler $assembler,
        GetOrganizationRequestBuilder $builder
    ) {
        $this->organizationViewModelDetailAssembler = $assembler;
        $this->getOrganizationRequestBuilder = $builder;
    }

    /**
     * @Route("/organizations/{organizationId}", name="oc_apiorganization_organization_get", methods={"GET"}, requirements={"organizationId"="^\d{1,9}$"})
     *
     * @Security("")
     * @throws NotFoundHttpException
     */
    public function getAction(int $organization): JsonResponse
    {
        try {
            $organization = $this->getOrganization($organization);
            $vm = $this->buildViewModel($organization);

            return $this->createJsonResponse($vm);
        } catch (OrganizationNotFoundException $e) {
            $this->throwNotFoundException();
        }
    }

    /**
     * @throws OrganizationNotFoundException
     */
    private function getOrganization(int $organizationId): OrganizationDetailResponse
    {
        return $this->get(GetOrganization::class)->execute(
            $this->getOrganizationRequestBuilder
                ->create()
                ->withOrganizationId($organizationId)
                ->build()
        );
    }

    protected function buildViewModel(OrganizationDetailResponse $organization): OrganizationViewModel
    {
        return $this->organizationViewModelDetailAssembler->create($organization);
    }
}
