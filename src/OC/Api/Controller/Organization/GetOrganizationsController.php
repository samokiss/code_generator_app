<?php

// Auto Generated by OpenClassrooms Code Generator

declare(strict_types=1);

namespace OC\Api\Controller\Organization;

use OC\ApiBundle\Framework\FrameworkBundle\Controller\AbstractApiController;
use OC\ApiBundle\ParamConverter\CollectionInformation;
use OC\Api\ViewModels\Organization\OrganizationViewModelListItem;
use OC\Api\ViewModels\Organization\OrganizationViewModelListItemAssembler;
use OC\BusinessRules\Requestors\Organization\GetOrganizationsRequestBuilder;
use OC\BusinessRules\Responders\PaginatedUseCaseResponse;
use OC\BusinessRules\UseCases\Organization\GetOrganizations;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Routing\Annotation\Route;

class GetOrganizationsController extends AbstractApiController
{
    /**
     * @var OrganizationViewModelListItemAssembler
     */
    private $organizationViewModelListItemAssembler;

    /**
     * @var GetOrganizationsRequestBuilder
     */
    private $getOrganizationsRequestBuilder;

    public function __construct(
        OrganizationViewModelListItemAssembler $assembler,
        GetOrganizationsRequestBuilder $builder
    ) {
        $this->organizationViewModelListItemAssembler = $assembler;
        $this->getOrganizationsRequestBuilder = $builder;
    }

    /**
     * @Route("/organizations", name="oc_apiorganization_organization_get_all", methods={"GET"})
     *
     * @Security("")
     * @ParamConverter("collectionInformation")
     */
    public function getAction(CollectionInformation $collectionInformation): JsonResponse
    {
        $organizations = $this->getOrganizations($collectionInformation);
        $vm = $this->buildViewModel($organizations);

        return $this->createJsonResponse($vm);
    }

    private function getOrganizations(CollectionInformation $collectionInformation): PaginatedUseCaseResponse
    {
        return $this->get(GetOrganizations::class)->execute(
            $this->getOrganizationsRequestBuilder
                ->create()
                ->withFilters($collectionInformation->getFilters())
                ->withItemsPerPage($collectionInformation->getItemsPerPage())
                ->withPage($collectionInformation->getPage())
                ->withSort($collectionInformation->getSorts())
                ->build()
        );
    }

    /**
     * @return OrganizationViewModelListItem[]
     */
    private function buildViewModel(PaginatedUseCaseResponse $organizations): array
    {
        return $this->organizationViewModelListItemAssembler->createListItems(
            $organizations->getItems()
        );
    }
}
