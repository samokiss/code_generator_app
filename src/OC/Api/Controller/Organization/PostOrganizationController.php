<?php

// Auto Generated by OpenClassrooms Code Generator

declare(strict_types=1);

namespace OC\Api\Controller\Organization;

use OC\ApiBundle\Framework\FrameworkBundle\Controller\AbstractApiController;
use OC\Api\Models\Organization\PostOrganizationModel;
use OC\Api\ViewModels\Organization\OrganizationViewModelDetail;
use OC\Api\ViewModels\Organization\OrganizationViewModelDetailAssembler;
use OC\BusinessRules\Requestors\Organization\CreateOrganizationRequestBuilder;
use OC\BusinessRules\Responders\Organization\OrganizationDetailResponse;
use OC\BusinessRules\UseCases\Organization\CreateOrganization;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Routing\Annotation\Route;

class PostOrganizationController extends AbstractApiController
{
    /**
     * @var CreateOrganizationRequestBuilder
     */
    private $createOrganizationRequestBuilder;

    /**
     * @var OrganizationViewModelDetailAssembler
     */
    private $organizationViewModelDetailAssembler;

    public function __construct(
        OrganizationViewModelDetailAssembler $assembler,
        CreateOrganizationRequestBuilder $builder
    ) {
        $this->organizationViewModelDetailAssembler = $assembler;
        $this->createOrganizationRequestBuilder = $builder;
    }

    /**
     * @Route("/organizations", name="oc_apiorganization_organization_post", methods={"POST"})
     *
     * @Security("")
     */
    public function postAction(): JsonResponse
    {
        /** @var PostOrganizationModel $model */
        $model = $this->getModelFromRequest(PostOrganizationModel::class);
        $response = $this->createOrganization($model);

        return $this->createCreatedResponse($this->generateLocationUrl($response), $this->buildViewModel($response));
    }

    private function createOrganization(PostOrganizationModel $model): OrganizationDetailResponse
    {
        return $this->get(CreateOrganization::class)->execute(
            $this->createOrganizationRequestBuilder
                ->create()
                ->withDescription($model->description)
                ->withLogo($model->logo)
                ->withName($model->name)
                ->build()
        );
    }

    private function generateLocationUrl(OrganizationDetailResponse $response): string
    {
        return $this->generateUrl('oc_apiorganization_organization_post', ['organizationId' => $response->getId()]);
    }

    private function buildViewModel(OrganizationDetailResponse $response): OrganizationViewModelDetail
    {
        return $this->organizationViewModelDetailAssembler->create($response);
    }
}
